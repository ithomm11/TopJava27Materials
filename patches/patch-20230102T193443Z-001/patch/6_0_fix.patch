Index: src/test/java/ru/javawebinar/topjava/MealTestData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ru/javawebinar/topjava/MealTestData.java b/src/test/java/ru/javawebinar/topjava/MealTestData.java
--- a/src/test/java/ru/javawebinar/topjava/MealTestData.java	(revision 57e7423426775c8d5ca96cc1684332de54472325)
+++ b/src/test/java/ru/javawebinar/topjava/MealTestData.java	(date 1668001785581)
@@ -3,7 +3,6 @@
 import ru.javawebinar.topjava.model.Meal;
 
 import java.time.Month;
-import java.time.temporal.ChronoUnit;
 import java.util.List;
 
 import static java.time.LocalDateTime.of;
@@ -33,6 +32,6 @@
     }
 
     public static Meal getUpdated() {
-        return new Meal(MEAL1_ID, meal1.getDateTime().plus(2, ChronoUnit.MINUTES), "Обновленный завтрак", 200);
+        return new Meal(MEAL1_ID, meal1.getDateTime().plusMinutes(2), "Обновленный завтрак", 200);
     }
 }
Index: src/main/java/ru/javawebinar/topjava/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/javawebinar/topjava/model/User.java b/src/main/java/ru/javawebinar/topjava/model/User.java
--- a/src/main/java/ru/javawebinar/topjava/model/User.java	(revision 57e7423426775c8d5ca96cc1684332de54472325)
+++ b/src/main/java/ru/javawebinar/topjava/model/User.java	(date 1668001785593)
@@ -62,7 +62,7 @@
     }
 
     public User(Integer id, String name, String email, String password, Role... roles) {
-        this(id, name, email, password, DEFAULT_CALORIES_PER_DAY, true, new Date(), Arrays.asList((roles)));
+        this(id, name, email, password, DEFAULT_CALORIES_PER_DAY, true, new Date(), Arrays.asList(roles));
     }
 
     public User(Integer id, String name, String email, String password, int caloriesPerDay, boolean enabled, Date registered, Collection<Role> roles) {
Index: src/main/java/ru/javawebinar/topjava/util/DateTimeUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/javawebinar/topjava/util/DateTimeUtil.java b/src/main/java/ru/javawebinar/topjava/util/DateTimeUtil.java
--- a/src/main/java/ru/javawebinar/topjava/util/DateTimeUtil.java	(revision 57e7423426775c8d5ca96cc1684332de54472325)
+++ b/src/main/java/ru/javawebinar/topjava/util/DateTimeUtil.java	(date 1668024290322)
@@ -7,7 +7,6 @@
 import java.time.LocalDateTime;
 import java.time.LocalTime;
 import java.time.format.DateTimeFormatter;
-import java.time.temporal.ChronoUnit;
 
 public class DateTimeUtil {
     private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
@@ -24,7 +23,7 @@
     }
 
     public static LocalDateTime atStartOfNextDayOrMax(LocalDate localDate) {
-        return localDate != null ? localDate.plus(1, ChronoUnit.DAYS).atStartOfDay() : MAX_DATE;
+        return localDate != null ? localDate.plusDays(1).atStartOfDay() : MAX_DATE;
     }
 
     public static String toString(LocalDateTime ldt) {
Index: src/main/java/ru/javawebinar/topjava/repository/jpa/JpaMealRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/javawebinar/topjava/repository/jpa/JpaMealRepository.java b/src/main/java/ru/javawebinar/topjava/repository/jpa/JpaMealRepository.java
--- a/src/main/java/ru/javawebinar/topjava/repository/jpa/JpaMealRepository.java	(revision 57e7423426775c8d5ca96cc1684332de54472325)
+++ b/src/main/java/ru/javawebinar/topjava/repository/jpa/JpaMealRepository.java	(date 1668025390809)
@@ -25,10 +25,8 @@
         if (meal.isNew()) {
             em.persist(meal);
             return meal;
-        } else if (get(meal.id(), userId) == null) {
-            return null;
         }
-        return em.merge(meal);
+        return get(meal.id(), userId) == null ? null : em.merge(meal);
     }
 
     @Override
